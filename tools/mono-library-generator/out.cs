//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Samples {
    using System.Runtime.CompilerServices;
    
    
    /// A custom class to test typing.
    public class CustomObjectData2 {
        
        /// A value only available on the child class CustomObjectData2.
        public int secondI {
            get {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
            set {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
        }
        
        /// An instance function that does stuff. Takes an int and a string.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public string doStuff(int i, string s) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// An instance function that does stuff. Takes a string. Specifically for CustomObjectData2.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public string doStuff(string s) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// An instance function that does stuff. Takes an int.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public string doStuff(int i) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// An inline lambda function attached as a constructor function. Specifically for CustomObjectData2.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public static CustomObjectData2 @__constructor(double d) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// A static function to test overloading. Takes an int.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public static string staticOverload(int i) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// A static function to test overloading. Takes a string and an int. Specifically for CustomObjectData2.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public static string staticOverload(string s, int i) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// A static function to test overloading. Takes a string.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public static string staticOverload(string s) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
    }
    
    /// A custom class to test typing.
    public class CustomObjectData {
        
        /// An instance int field.
        public int i1 {
            get {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
            set {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
        }
        
        /// Sub class data pointer.
        public CustomObjectSubData o1 {
            get {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
            set {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
        }
        
        /// Sub class data shared pointer.
        public CustomObjectSubData o2 {
            get {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
            set {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
        }
        
        /// Sub class data non-pointer.
        public CustomObjectSubData o3 {
            get {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
            set {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
        }
        
        /// Sub class data & reference.
        public CustomObjectSubData o4 {
            get {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
            set {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
        }
        
        /// An instance string field.
        public string s1 {
            get {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
            set {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
        }
        
        /// A static double field.
        public static double d1 {
            get {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
            set {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
        }
        
        /// An instance function that does stuff. Takes an int and a string.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public string doStuff(int i, string s) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// An instance function that does stuff. Takes an int.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public string doStuff(int i) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// A function pointer to bind to lua.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public int functionPointer(int i) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// An member function that does stuff asynchronously and returns a promise.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public Promise memberAsync(int numSeconds) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// A function to test how many invocations of the functionPointer can be done per second.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public double testPassedFunction(uint i) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// An inline lambda function attached as a constructor function.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public static CustomObjectData @__constructor(int num) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// An overloaded inline lambda function attached as a constructor function. Takes a string instead of an int.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public static CustomObjectData @__constructor(string str) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// An static function that does stuff asynchronously and returns a promise.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public static SharedPromise staticAsync(int numSeconds) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// An static function that does stuff.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public static string staticFunction(int num) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// A function pointer to bind to lua.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public static int staticFunctionPointer(int i) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// A static function to test overloading. Takes an int.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public static string staticOverload(int i) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// A static function to test overloading. Takes a string.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public static string staticOverload(string s) {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
    }
    
    /// An awaitable promise of an asynchronous execution.
    public class SharedPromise {
        
        /// Block this thread and wait for the promise to resolve.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public string await() {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// Execute the passed callback function upon completion of the promise. Execution is deferred until the promise returned by onResolve is awaited.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public SharedPromise onResolve() {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
    }
    
    /// An awaitable promise of an asynchronous execution.
    public class SharedPromise {
        
        /// Block this thread and wait for the promise to resolve.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public void await() {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
        
        /// Execute the passed callback function upon completion of the promise. Execution is deferred until the promise returned by onResolve is awaited.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public SharedPromise onResolve() {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
    }
    
    /// A custom class to test typing a class's sub class.
    public class CustomObjectSubData {
        
        /// Sub data's instance int field.
        public int i2 {
            get {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
            set {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
        }
        
        /// Sub data's instance string field.
        public string s2 {
            get {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
            set {
                throw new System.Exception("This function was not properly bounded by an internal call.");
            }
        }
    }
    
    /// An awaitable promise of an asynchronous execution.
    public class Promise {
        
        /// Block this thread and wait for the promise to resolve.
        [MethodImplAttribute(MethodImplOptions.InternalCall)]
        public string await() {
            throw new System.Exception("This function was not properly bounded by an internal call.");
        }
    }
}

